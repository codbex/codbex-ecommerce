openapi: 3.0.4
info:
  title: codbex-ecommerce - OpenAPI 3.0
  description: OpenAPI for codbex-ecommerce
  version: 1.0.0
servers:
  - url: /services/ts/codbex-ecommerce/api/ProductService.ts
tags:
  - name: Product
    description: Product
  - name: Category
    description: Product category
  - name: Brand
    description: Product Manufacturer
paths:
    /account/addresses:
    get:
      tags:
        - AccountAddresses
      summary: List logged customer account addresses
      description: Returns account addresses
      responses:
        '200':
          description: Successful response with account addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountAddresses'
        '400':
           description: Invalid account
           content:
             application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /account/details:
      get:
      tags:
        - AccountDetails
      summary: List logged customer account details
      description: Returns account details
      responses:
        '200':
          description: Successful response with account details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDetails'
        '400':
           description: Invalid account
           content:
             application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /account/orders:
      get:
      tags:
        - SalesOrder
      summary: List logged customer Sales Orders
      description: Returns sales orders filtered by customer
      responses:
        '200':
          description: Successful response with filtered sales orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesOrder'
        '400':
           description: Invalid customer
           content:
             application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /productsByCategory/{categoryId}:
      get:
      tags:
        - Product
      summary: List products by category
      description: Returns products filtered by a given category ID, including pricing, availability, and images.
      parameters:
        - in: path
          name: categoryId
          required: true
          description: The ID of the category to filter products by
          schema:
            type: string
      responses:
        '200':
          description: Successful response with filtered products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductSummary'
        '400':
           description: Invalid category ID format
           content:
             application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /products:
      get:
      tags:
        - Product
      summary: List products
      description: Returns a list of up to 30 products, with pricing, availability, and images.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductSummary'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    /product/{productId}:
      get:
      tags:
        - Product
      summary: Get product by ID
      description: Returns detailed product data for a given product ID.
      parameters:
        - in: path
          name: productId
          required: true
          description: The ID of the product to fetch
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /brands:
      get:
      tags:
        - Brand
      summary: List all brands
      description: Returns a list of all product manufacturers (brands).
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /countries:
      get:
      tags:
        - Country
      summary: List all countries
      description: Returns a list of all countries.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /categories:
      get:
      tags:
        - Category
      summary: List all product categories
      description: Returns a list of product categories, including the count of products in each.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Skincare"
        productCount:
          type: integer
          example: 25
    Brand:
      type: object
      properties:
        id:
          type: string
          example: "123"
        name:
          type: string
          example: "Bioderma"
    Country:
      type: object
      properties:
        name:
          type: string
          example: "Bulgaria"
        code:
          type: string
          example: "BUL"
    ProductSummary:
      type: object
      properties:
        id:
          type: string
          example: "101"
        title:
          type: string
          example: "Vitamin C Serum"
        shortDescription:
          type: string
          example: "Brightening serum for glowing skin"
        price:
          $ref: '#/components/schemas/Money'
        category:
          type: string
          example: "Skincare"
        availableForSale:
          type: boolean
          example: true
        featuredImage:
          type: string
          nullable: true
          example: "https://cdn.example.com/images/vitamin-c.jpg"
        images:
          type: array
          items:
            type: string
            example: "https://cdn.example.com/images/vitamin-c-2.jpg"
    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/ProductSummary'
        - type: object
          properties:
            brand:
              type: string
              example: "The Ordinary"
            description:
              type: string
              example: "A high-potency vitamin C serum with 20% concentration."
            attributes:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Volume"
                    value:
                      type: string
                      example: "30ml"
    AccountDetails:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
          description: "Customer's first name"
        lastName:
          type: string
          example: "Doe"
          description: "Customer's last name"
        phoneNumber:
          type: string
          example: "+1234567890"
          description: "Customer's phone number"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: "Customer's email address"
        creationDate:
          type: string
          format: date-time
          example: "2025-08-11T12:34:56Z"
          description: "Account creation date in ISO 8601 format"
      ShippingAddress:
       type: object
       properties:
        id:
          type: string
          example: "1"
          description: "Unique identifier for the customer address"
        firstName:
          type: string
          example: "John"
          description: "Customer's first name"
        lastName:
          type: string
          example: "Doe"
          description: "Customer's last name"
        country:
          type: string
          example: "USA"
          description: "Country name"
        addressLine1:
          type: string
          example: "123 Main St"
          description: "Primary address line"
        addressLine2:
          type: string
          example: "Apt 4B"
          description: "Secondary address line"
        city:
          type: string
          example: "New York"
          description: "City"
        postalCode:
          type: string
          example: "10001"
          description: "Postal or ZIP code"
        phoneNumber:
          type: string
          example: "+1234567890"
          description: "Phone number associated with the address"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: "Email associated with the address"
      BillingAddress:
       type: object
       properties:
        id:
          type: string
          example: "1"
          description: "Unique identifier for the customer address"
        firstName:
          type: string
          example: "John"
          description: "Customer's first name"
        lastName:
          type: string
          example: "Doe"
          description: "Customer's last name"
        country:
          type: string
          example: "USA"
          description: "Country name"
        addressLine1:
          type: string
          example: "123 Main St"
          description: "Primary address line"
        addressLine2:
          type: string
          example: "Apt 4B"
          description: "Secondary address line"
        city:
          type: string
          example: "New York"
          description: "City"
        postalCode:
          type: string
          example: "10001"
          description: "Postal or ZIP code"
        phoneNumber:
          type: string
          example: "+1234567890"
          description: "Phone number associated with the address"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: "Email associated with the address"
    AccountAddresses:
      type: object
      properties:
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
          description: "Shipping address details"
        billingAddress:
          $ref: '#/components/schemas/BillingAddress'
          description: "Billing address details"
    SalesOrder:
      type: object
      properties:
        id:
          type: string
          example: "101"
        creationDate:
          type: string
          format: date-time
          example: "2025-08-11T14:30:00Z"
        status:
          type: string
          example: "Pending"
        totalAmount:
          $ref: '#/components/schemas/Money'
    Money:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 12.99
        currency:
          type: string
          example: "USD"
    Error:
      type: object
      properties:
        message:
          type: string
          example: Error message
        code:
          type: integer
          example: The error code 

